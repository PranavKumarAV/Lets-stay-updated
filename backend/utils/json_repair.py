"""
Minimal JSON repair utility.

This module defines a ``jsonrepair`` function that attempts to fix
common syntax issues encountered in language-model outputs before
parsing them as JSON.  It repairs single quotes, removes trailing
commas before closing brackets/braces, and returns a cleaned JSON
string.  Additional rules can be added here as needed.
"""

import re

def jsonrepair(text: str) -> str:
    """Attempt to repair a JSON string.

    This helper function fixes common issues found in JSON-like strings
    generated by language models, such as the use of single quotes and
    trailing commas.  It returns a repaired string that can be
    safely passed to ``json.loads``.

    :param text: The raw JSON-like string potentially containing
        single quotes or trailing commas.
    :return: A best-effort repaired JSON string.
    """
    if not isinstance(text, str):
        return text
    repaired = text
    # Replace single quotes with double quotes
    repaired = repaired.replace("'", '"')
    # Remove trailing commas before closing braces/brackets
    repaired = re.sub(r",\s*([}\]])", r"\1", repaired)
    return repaired

# -----------------------------------------------------------------------------
# Convenience API mirroring the `json_repair` Python package.
#
# Some external callers expect a ``json_repair.loads`` function that performs
# both the repair and the JSON decoding in one step.  To maintain that API,
# we provide ``loads`` here which wraps ``jsonrepair`` and ``json.loads``.
# This avoids having to call ``jsonrepair()`` followed by ``json.loads()``
# throughout the codebase.
import json as _json

def loads(text: str):
    """Repair a JSON-like string and decode it to a Python object.

    :param text: A raw JSON-like string that may contain minor syntax errors.
    :return: The decoded Python object.
    :raises json.JSONDecodeError: If the string cannot be repaired/decoded.
    """
    repaired = jsonrepair(text)
    return _json.loads(repaired)

def dumps(obj) -> str:
    """Serialize a Python object to a JSON string.

    This is a simple pass-through to ``json.dumps`` provided for API parity.
    """
    return _json.dumps(obj)