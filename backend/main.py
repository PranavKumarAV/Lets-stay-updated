from fastapi import FastAPI, HTTPException
from fastapi.middleware.cors import CORSMiddleware
from fastapi.staticfiles import StaticFiles
from fastapi.responses import FileResponse
import os
import uvicorn
from contextlib import asynccontextmanager
import logging

# Import submodules relative to the backend package.  When this module
# is executed as part of the ``backend`` package (e.g. via
# ``python -m backend.main`` or ``uvicorn backend.main:app``), these
# relative imports resolve correctly.  Avoid absolute imports like
# ``from api.routes`` to prevent "attempted relative import beyond
# top-level package" errors when the code is packaged.
from .api.routes import router as api_router
from .core.config import settings
from .core.database import init_db

# Configure logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

@asynccontextmanager
async def lifespan(app: FastAPI):
    """Startup and shutdown logic for the FastAPI app."""
    logger.info("ðŸš€ Starting up the application...")
    await init_db()
    yield
    logger.info("ðŸ›‘ Shutting down the application...")

# Initialize FastAPI app
app = FastAPI(
    title="Let's Stay Updated - AI News Curation",
    description="AI-powered news aggregation and curation platform using GroqCloud",
    version="1.0.0",
    lifespan=lifespan
)

# CORS middleware (adjust for production security)
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],  # ðŸ”’ Replace with specific domains in production
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# Health check endpoint
@app.get("/health")
async def health_check():
    return {"status": "ok", "message": "Service is healthy"}

# Mount all API routes
app.include_router(api_router, prefix="/api")

# Serve frontend static files unconditionally if the compiled React app exists.
#
# We mount the ``dist/public`` directory generated by the frontend build at
# the root path so that requests to ``/`` and all nonâ€‘API routes return the
# ``index.html`` file.  This enables clientâ€‘side routing for the React SPA
# and avoids returning 404 when the environment variable ``ENVIRONMENT``
# isn't set to ``production`` or is missing entirely.  The ``html=True``
# option tells FastAPI to serve ``index.html`` for directory requests.
static_dir = os.path.join(os.path.dirname(__file__), "..", "dist", "public")
if os.path.exists(static_dir):
    # Mount the static directory at the root path.  Any request that
    # doesn't start with ``/api`` will be served from this directory.
    app.mount(
        "/",
        StaticFiles(directory=static_dir, html=True),
        name="static",
    )

    @app.get("/{full_path:path}")
    async def serve_react_app(full_path: str):
        """Serve index.html for nonâ€‘API routes (React SPA)"""
        # Skip API routes and let FastAPI handle them normally.
        if full_path.startswith("api/"):
            raise HTTPException(status_code=404, detail="Not found")
        index_file = os.path.join(static_dir, "index.html")
        if os.path.exists(index_file):
            return FileResponse(index_file)
        raise HTTPException(status_code=404, detail="Not found")

# Dev entry point
if __name__ == "__main__":
    # When running this module directly, use uvicorn and reference the
    # application via the ``backend.main:app`` module path.  This
    # ensures that uvicorn imports the module within the package
    # namespace, enabling relative imports to work correctly.  The
    # ``reload`` flag is enabled automatically in development mode.
    uvicorn.run(
        "backend.main:app",
        host="0.0.0.0",
        port=settings.PORT,
        reload=settings.ENVIRONMENT == "development"
    )
